{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 function BtNode(value) \{\
    this.val = value;\
    this.left = null;\
    this.right = null;\
    this.add = function(newNode) \{\
        console.log(this);\
        if(newNode.val < this.val)\{ // left\
            if(this.left)\{ // left node already exists\
                this.left.add(newNode);\
            \} else \{ // left node does not exist, so we asign\
                this.left = newNode;\
            \}\
        \} else if (newNode.val >= this.val)\{ // right\
            if(this.right)\{ // right node already exists\
                this.right.add(newNode);\
            \} else \{ // right node does not exist, so we asign\
                this.right = newNode;\
            \}\
        \}\
        return this;\
    \}\
\}\
\
function Bst() \{\
    this.root = null;\
    this.add = function(val)\{\
        var before = new Date();\
        // console.log('before', before.getMilliseconds());\
        var newNode = new BtNode(val);\
        if(this.root) \{\
            var curr = this.root;\
            while(curr)\{\
                if(newNode.val >= curr.val) \{ // right\
                    if(curr.right)\{ // continue right\
                        curr = curr.right;\
                    \} else \{ // add to the right\
                        curr.right = newNode;\
                        break;\
                    \}\
                \} else if (newNode.val < curr.val)\{ // left\
                    if(curr.left)\{\
                        curr = curr.left;\
                    \} else \{\
                        curr.left = newNode;\
                        break;\
                    \}\
                \}\
            \}\
        \} else \{\
            this.root = newNode;\
        \}\
\
        var after = new Date();\
        // console.log('after', after.getMilliseconds());\
\
        console.log((after.getMilliseconds()-before.getMilliseconds()));\
    \}\
    this.rAdd = function(val)\{\
        var newNode = new BtNode(val);\
        if(this.root)\{\
            rFindandAdd(this.root);\
            function rFindandAdd(curr)\{\
                if(newNode.val < curr.val)\{ // left\
                    if(curr.left)\{ // left node already exists\
                        rFindandAdd(curr.left);\
                    \} else \{ // left node does not exist, so we asign\
                        curr.left = newNode;\
                    \}\
                \} else if (newNode.val >= curr.val)\{ // right\
                    if(curr.right)\{ // right node already exists\
                        rFindandAdd(curr.right);\
                    \} else \{ // right node does not exist, so we asign\
                        curr.right = newNode;\
                    \}\
                \}\
            \}\
\
        \} else \{\
            this.root = newNode;\
        \}\
        \
    \}\
    this.jasonAdd = function(val)\{\
        var newNode = new BtNode(val);\
        if(this.root)\{\
            this.root.add(newNode);\
        \} else \{\
            this.root = newNode;\
        \}\
        return this;\
    \}\
\
\}}